抽象类:
 1)含义:在java程序中不存在对象的类型
 2)为什么需要抽象类
 	抽象类能够更加直接的为程序搭建结构
 3)定义抽象类:访问修饰符+abstract+class+类名  
 	public abstract class A{}
 4)抽象类的特征
 	4.1)不能被实例化
 	4.2)可以编写抽象方法
 	4.3)抽象方法数量不限(0~很多)
 
 	
抽象方法:
 1)含义:在抽象类中不能写出具体操作的方法
 2)定义:在方法的返回值前加abstract	    只有声明没有实现
 	public abstract void abc();
 3)抽象方法特征:
 	3.1)抽象方法不能写方法体
 	3.2)抽象方法必须在子类中被重写(注意:重写时不要写abstract),除非子类也是抽象类
 	3.3)抽象方法必须在抽象类中

抽象类和抽象方法:
	1)注意事项:
		abstract和final关键字不能同时修饰类或方法
	2)抽象类的意义:
		2.1)因为抽象类不能实例化,明确了抽象类只是程序框架使得程序结构更加清晰
		2.2)抽象类除了不能实例化,拥有普通类的其他所有功能,所以特别适合作为父类提供代码复用
		2.3)更自然的使用向上造型调用子类重写后的方法
	3)不是所有父类都是抽象类
	4)Object类不是抽象类
	5)抽象类可以继承非抽象类
	
	
类加载机制(深入理解)
类加载时机:
	创建类的实例，也就是new一个对象
	访问某个类或接口的静态变量，或者对该静态变量赋值
	调用类的静态方法
	初始化一个类的子类（会首先初始化子类的父类）
	反射（Class.forName("com.lyj.load")
	JVM启动时标明的启动类，即文件名和类名相同的那个类    
