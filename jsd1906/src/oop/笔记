OOP面向对象编程：（9天）   O:对象   O：面向    P：编程
	1.OOP的相关知识
	2.完成飞机大战的编程
	
	
	
	飞机大战
第一天
创建
小敌机,大敌机,奖励机
背景,子弹,英雄机
六个类
编写属性和输出方法
在main方法中实例化测试

第二天
1.在world类中定义一个start方法
               并在main方法中调用
2.在world类中定义所有需要的对象和数组
               小敌机,大敌机,小蜜蜂
	        天空,子弹,英雄机
3.在start方法中调用输出各种对象的信息
	
	
	
	
	面向对象编程的思想理解是长期的
	面向对象编程的理解是多样的
	
	
面向对象编程：
	1）面向过程与面向对象的区别
			将面向过程编写的代码模块化形成多个程序组件，最终拼装运行
			
			面向对象的好处：
				减少代码冗余，简化代码编写
				提高程序的可维护性和可扩展性
				
	2）什么是对象
			Object：物品，东西
			万物皆对象
	3）现实世界中先有对象，后抽象出类型
	4）在java中先有类型，后实例化出对象
	
	5）类（理解为一个模板）中包含的内容是由对象决定的		类没有具体的属性值
	6）对象主要包含两方面信息：
			属性：对象的数据特征
			方法：
	
	作业：
	7)在java中编写类：
			新建一个class类，在class中写类的属性和方法	
	8）新建一个包含main方法的class
			实例化，之后通过对象调用方法 
			格式：
						Student stu=new Student();	//Student是类
						stu.study();					//stu是对象
			
			
	
	
	CGB面向对象：
1）类：
			事物，算法，逻辑，概念等的抽象
			用来封装相关的数据和方法代码，封装成一个独立组件
	
2）对象：	
			从类创建的实例，每个实例有独立的空间，保留各自的属性数据
			实例可以独立控制，让实例去执行模板中指定的代码
	
3）引用：
	        保存一个实例的内存地址，用引用变量可以控制，调用一个实例
			
4）构造方法
	
		新建实例时, 执行的一个特殊方法：
								new Solder();
								new AK47();
		

		java的类中,必须有构造方法。如果自己不定义构造方法, 编译器编译代码时,会添加默认的构造方法
							class Soldier {
									public Soldier(){//构方法，与类同名
									}
							}
		作用：构造一个实例之后,立即执行的一个特殊方法
				 构造方法中的代码,可以任意编写,完成任意功能,执行任意运算
		
		
		局部变量与成员变量同名，必须使用this.student=student;   
						public class AK47 {
								//成员变量
								int bullets;
								public AK47(int bullets) {//构造方法
								    this.bullets = bullets;
						}
5)API(Application Programming Interface应用编程接口)
			一切可以调用的东西,都是 API.如：
											new Scanner(System.in).nextInt()
											new Random().nextInt(4)

6)String
		创建字符串：
				char[] a={'a','b','c','d'};
				String string=new String(a);
				string="oppo";
		字符串常量池:
					第一次使用一个字符串的字面值,在"字符串常量池"中新建实例
					再次使用相同字面值时,直接访问常量池中存在的实例,而不会新建
					
		 字符串不可变:
				字符串加号连接,会新建字符串实例,如果多次连接,效率低	
	
7)小结：
	面向对象
				  类:模板,图纸
				  对象: 实例
				  引用: 遥控器
				  构造方法:
						      新建实例时执行
							  不定义有默认
							  作用: 自己定
				  this:
							  特殊引用,保存当前实例的地址
								this.xxx

				  String
								  封装 char[] 数组
								  常量池
								  不可变, 加号连接效率低
		