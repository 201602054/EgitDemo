OOP面向对象编程：（9天）   O:对象   O：面向    P：编程
	1.OOP的相关知识
	2.完成飞机大战的编程
	
java:
	工具,框架全面,共享的免费资料多
	
java的优势:负载高,安全,速度快,程序易扩展
java缺点:开发周期长,导致成本高

	
	飞机大战
第一天
	创建
	小敌机,大敌机,奖励机
	背景,子弹,英雄机
	六个类
	编写属性和输出方法
	在main方法中实例化测试

第二天
	1.在world类中定义一个start方法
	               并在main方法中调用
	2.在world类中定义所有需要的对象和数组
	               小敌机,大敌机,小蜜蜂
		        天空,子弹,英雄机
	3.在start方法中调用输出各种对象的信息

第三天	
	1)创建父类飞行物FlyingObject
		编写
			属性四个：width height x，y
			构造方法两个：小敌机，大敌机，奖励机
						天空，子弹，英雄机
	2)六个子类继承FlingObject
	3)将所有子类属性中的width,height,x,y删除
	4)重新编写合适的构造方法
	5)使用FlyingObject[] 替换小敌机,大敌机和奖励机的数组,start方法中遍历数组
	
第四天
	1)画窗口
		让world类继承JPanel
	在main方法中实例化窗口,并显示
	2)父类中多有属性改为protected,6个子类中私有属性改为private 
	
第五天	
	1)将需要用的图片粘贴到项目中
	2)在FlyingObject类中编写一个加载图片的方法
	3)在六个子类中编写静态图片数组保存图片
	4)在FlyingObject中定义飞行物的状态并编写状态属性
	5)在FlyingObject中编写三个判断当前状态的方法
	6)如果运行时发生的异常中办函信息 input=null
		说明加载的图片文件名错误
第六天
	1)将FlyingObject修改为抽象类
		编写两个抽象方法
		step():移动个
		getImage():获取图片
	2)在六个子类中
		重写两个抽象方法
	3)在FlyingObject类中
		编写一个将图片绘制到窗口的方法
第七天
	1)在World类中编写让所有在场元素移动起来的方法moveAction(),在计时器中调用该方法
	2)编写一个随机生成敌机的方法makeEnemy()
	3)编写敌机进场的方法enemyEnterAction并在计时器中调用
	4)在Hero类中,编写英雄机的开炮方法shoot()  根据火力值决定是双炮还是单炮
第八天
1.在World类中
  编写子弹进场
  并在计时器中调用

2.创建2个接口
  创建得分接口
  创建奖励接口
3.小敌机,大敌机实现得分接口
  奖励机实现奖励接口

4.在Hero类中编写一个专门用于
  配合鼠标移动的方法
  moveTo()

5.在World类中的start方法中
  声明一个鼠标监听器重写鼠标移动方法
  并注册到鼠标移动和鼠标滑动事件中	

第九天:
	1)在FlyingObject类中编写一个方法outOfBounds
	2)在World类中
		  编写一个检测敌机和子弹出界的方法
		  如果敌机或子弹出界
		  要将出界的对象,从对应数组中移除
		
	3)出界方法思路
		  1.编写一个和源数组长度一致的数组
		  2.定义一个int index=0
		  3.遍历源数组,将没有出界的对象
		    放入在新数组的index位置
		    并且index++;
		  4.新数组缩容成index的长度
	4)FlyingObjectzhong 编写一个判断碰撞的方法,编写一个修改状态为dead的方法
	5)Hero类中编写加命,加火力方法,获得命数的方法
	6)world类编写一个hitAction方法,判断子弹是否击中敌机,并在计时器中调用
第十天
	1)Hero 类中添加两个方法  英雄机减命,火力清零
	2)World类中编写英雄机和敌机碰撞的方法,碰撞英雄机减命,减火力,	在计时器中调用
	3)World类中添加四个状态常量,添加状态属性state,添加图片,静态块加载图片
	4)在鼠标监听器中
		移动:添加if判断,只在运行状态下运行
		点击:开始状态切换到运行状态,结束状态切换到开始状态
		移出:如果是运行状态,切换到暂停状态
		移入:如果是暂停状态,切换到运行状态
	5)计数器
		除repaint方法外,其他方法均在运行状态下才能运行
	6)编写一个游戏结束的判断gameOverAction并在计时器中调用
	7)在repaint方法中编写一个多分支结构,在不同状态下画不同的图
	
	
	
	
	面向对象编程的思想理解是长期的
	面向对象编程的理解是多样的	
	
面向对象编程：
	1）面向过程与面向对象的区别
			将面向过程编写的代码模块化形成多个程序组件，最终拼装运行
			
			面向对象的好处：
				减少代码冗余，简化代码编写
				提高程序的可维护性和可扩展性
				
	2）什么是对象
			Object：物品，东西
			万物皆对象
	3）现实世界中先有对象，后抽象出类型
	4）在java中先有类型，后实例化出对象
	
	5）类（理解为一个模板）中包含的内容是由对象决定的		类没有具体的属性值
	6）对象主要包含两方面信息：
			属性：对象的数据特征
			方法：
	
	作业：
	7)在java中编写类：
			新建一个class类，在class中写类的属性和方法	
	8）新建一个包含main方法的class
			实例化，之后通过对象调用方法 
			格式：
						Student stu=new Student();	//Student是类
						stu.study();					//stu是对象
			
			
	
	
	CGB面向对象：
1）类：
			事物，算法，逻辑，概念等的抽象
			用来封装相关的数据和方法代码，封装成一个独立组件
	
2）对象：	
			从类创建的实例，每个实例有独立的空间，保留各自的属性数据
			实例可以独立控制，让实例去执行模板中指定的代码
	
3）引用：
	        保存一个实例的内存地址，用引用变量可以控制，调用一个实例
			
4）构造方法
	
		新建实例时, 执行的一个特殊方法：
								new Solder();
								new AK47();
		java的类中,必须有构造方法。如果自己不定义构造方法, 编译器编译代码时,会添加默认的构造方法
							class Soldier {
									public Soldier(){//构造方法，与类同名
									}
							}
		作用：构造一个实例之后,立即执行的一个特殊方法
				 构造方法中的代码,可以任意编写,完成任意功能,执行任意运算
		
		
		局部变量与成员变量同名，必须使用this.student=student;   
						public class AK47 {
								//成员变量
								int bullets;
								public AK47(int bullets) {//构造方法
								    this.bullets = bullets;
						}
5)API(Application Programming Interface应用编程接口)
			一切可以调用的东西,都是 API.如：
											new Scanner(System.in).nextInt()
											new Random().nextInt(4)

6)String
		创建字符串：
				char[] a={'a','b','c','d'};
				String string=new String(a);
				string="oppo";
		字符串常量池:
					第一次使用一个字符串的字面值,在"字符串常量池"中新建实例
					再次使用相同字面值时,直接访问常量池中存在的实例,而不会新建
					
		 字符串不可变:
				字符串加号连接,会新建字符串实例,如果多次连接,效率低.
		要多次改变字符串值要用到StringBuilder知识	地址:jsd1906/src/string
	
7)小结：
	面向对象
				  类:模板,图纸
				  对象: 实例
				  引用: 遥控器
				  构造方法:
						      新建实例时执行
							  不定义有默认
							  作用: 自己定
				  this:
							  特殊引用,保存当前实例的地址
								this.xxx

				  String
								  封装 char[] 数组
								  常量池
								  不可变, 加号连接效率低
		