初始面向对象编程
	1）什么是OOP
			相对于面向过程编程，面向过程编程代码冗余大，维护和扩展成本高，不易大型项目开发
	2）为什么OOP？（面试）
			在大型项目中，面向对象思维能较大的改善代码冗余，提高程序的可维护性和可扩展性

			
类和对象：
	1）生活中的对象
				东西就是对象，万物皆对象		对象是可操作的，拥有属性和数值的主体
	2）生活中先有对象后有类
			类是概念，规定了这个类型的对象应该有的基本信息
	3）java中的类和对象
		java中先有类，后有对象
		类中定义：属性
						方法				面向对象编程的方法暂时不写static
		使用属性和方法的是对象
	4）使用类和对象处理问题的好处
			减少代码冗余 		提高程序可维护性和可扩展性
		
			
java中利用面向对象思维处理简单的问题
	1)新建类（每个单词首字母大写  例如：TeacherTest）	
		新建Emp类
		类中定义属性和方法
		
		注意：一个java文件可以写多个类，但是只有一个类有public（此类名和文件一致）	
				只有public的类中的main方法可以作为程序入口
	
	2）实例化对象
		<类名> <对象名>=new <类名>();//有参数的需要在()中写实参
	3)使用对象				
		对象名.属性/方法
		一个类可以实例化多个对象
		对象的属性有默认值
		

方法重载（方法超载/overload）
	1）含义：一个类中的方法名相同，方法的参数列表不同的多个方法
		
		方法签名：方法名+参数列表
						类中不允许方法签名完全相同的多个方法
	2）方法重载的注意事项
		方法重载的必要条件：
			2.1在同一个类中(以后可能会变化)
			2.2方法名相同
			2.3参数列表不同
							参数的（个数，类型，顺序）有一个不同就可以
							注意：参数名相同不能重载
			2.4访问修饰符（public、protected、private、default）与返回值类型无关
					default (即缺省，什么也不写）: 在同一包内可见，不使用任何修饰符。			使用对象：变量、方法、类、接口、
					public : 对所有类可见。			使用对象：变量、方法、类、接口
					
					private : 在同一类内可见。		使用对象：变量、方法。 注意：不能修饰类（外部类）
					protected : 对同一包内的类和所有子类可见。		使用对象：变量、方法。 注意：不能修饰类（外部类）。
	
	
	3）为什么使用方法重载？
			方便同一个类中功能相似的方法的记忆和调用
	4）系统中的方法重载
			例如：
					System.out.println();
					Arrays.sort();
					Arrays.copyOf();
					.........
	5）方法重载主要：在	构造方法	中使用
			
			
构造方法：
				实例化对象后需要为对象的属性依次赋值，太麻烦，使用	构造方法	简化
	1）构造方法含义：就是在实例化对象时运行的一个特殊的方法	
						构造方法也叫构造器/构造函数
	2）作用：通常情况下，使用构造方法为属性赋初值
	3）构造方法的格式：
			在类中：
			public <类名>(){
			
			}
		3.1）构造方法没有返回值类型，void都没有
		3.2）构造方法名必须与类名相同
		
	4)注意事项
		4.1）构造方法会在实例化对象时运行			new <类名>（）；//若构造参数重载，需要用重载的构造方法就需要传参
		4.2）如果一个类没有编写构造方法，编译器在编译时会默认生成一个无参构造方法：public 类名(){}  
		4.3）如果一个类编写了构造方法就不会生成默认构造方法
		4.4）构造方法可以重载
		4.5）构造方法不能使用对象调用
				只有实例化时才能使用构造方法
		
			注意：在同一个文件下的类名不能重复（包括包中创建的其他类）
			
局部变量和成员变量：
	1）局部变量声明在方法中，成员变量声明在类中
	2)局部变量只能在声明他的方法中使用，成员变量能在类中的任何方法中使用
	3）局部变量和成员变量重名，局部变量具有更高的优先级
		输出成员变量的值，需要在变量前加上   this.age=age;  this.age指的是成员变量   age是局部变量
		
		
this关键字
	1）含义：是对象在程序中对自身的引用
	2）this关键字使用
		2.1）在方法中，类的属性前写this，调用当前对象的属性（成员变量），能够将成员变量和局部变量区分
				this.<属性名>		//调用当前对象的属性
				哪个对象调用this，就指向哪个对象
		2.2）this.方法名（）；
					调用方法时，this一般不写
		2.3）this（）；
				调用当前类的构造方法		//有参就调用有参的构造方法
				必须编写在当前类的构造方法中的		第一行

引用数据类型的数组：
	1)基本数据类型数组的定义：
				int[] arr=new int[5];
				int[] arrays=new int[]{1,2,3};或int[] arrays={1,2,3};
	2)引用数据类型数组（String,自造类，数组）
			<类型名>[]   数组名 =  new <类型>[长度];
			声明后数组中元素的默认值是null（引用）
			
			为数组元素赋值：
								数组名[下标] =new <类名>（<参数列表>）； 
								dogs[0]=new Dog("fas",5,15,"公"); 
			调用方法（对象）：数组名[下标].方法名()；			数组名[下标] 对应的才是对象
										dogs[i].show();
			
			引用数据类型声明同时赋值：Dog[] dogs={new Dog(),new Dog(),...};
			
			
				数组是对象：
			 * 		数组变量（即，数组名）是引用数据类型，存储地址信息
			 * 		数组的元素可以看作数组对象的成员变量
			 * 		数组元素也可以是引用类型，此时，数组元素需要进行“new”运算
			 * 		例如：
			 * 			cell[] c=new Cell[4];			//实例化  数组的长度
			 * 			c[0]=new Cell(0,4);//给每个元素赋值，需要创建四个对象
			 * 				.....
			 * 		严格讲，java中没有真正的二维数组
			
	3)null和null指针
			null表示当前引用没有引用任何对象
			不能对null进行任何操作，否则就会发生空指针异常：NullPointerException
			
			定义为null，在调用时编译不报错，运行时异常
					
	4）多维数组（二维数组/矩阵）
		数组中的元素还是数组
		
		声明：	
					int[][] arr=new int[长度1][长度2];//第一个长度必须写
					arr[0]=new int[5];
					arr[1]=new int[3];
					...
			
			声明同时赋值：
						int[][] arr={{1,2},{3,4,5,6},{5,6},...};
			
	
	
		