包:(package)
 1)含义:java程序中存储一个模块或单元类的集合
 2)使用原因:
 	2.1)不同包中的类名可以同名
 	2.2)方便团队开发
 3)使用方法:
 	3.1)在类中可以通过包名访问不同包中的类
 	3.2)java中一个类是通过全类名(包名+类名)来唯一标识的
 		全类名: 包名+类名  	中间用.分开
 	3.3)java中的包名全部小写,如果有多个单词,单词之间用.分隔
 	3.4)定义一个全球唯一的全类名(域名反写)
 		cn.tedu.shoot.game.Start
 		
import关键字:
 	1)含义:java程序中在使用不同包中的类之前对一个类进行导入的语法格式
 	2)使用原因:使用import导入包或类后,在使用这个类时候就不用写全类名了
 	3)如何使用import
 		3.1)导入类
 				import.java.util.Scanner;
 		3.2)导入包		
 			import java.util.*;
 			只能导入当前包的所有类,不能导入子包的类
 		3.3)导包的同名
 			java中不允许一个类中导入相同类名的多个类
 			如果要使用该类,就需要用全类名
 		3.4)默认的导包
 			java程序在编译时,会默认导入java.lang.*;
 		
 		
访问修饰符:
	1)含义:规定了类中的成员的访问级别的关键字,规定了类中的属性和方法被访问的权限
	2)使用原因:增强程序的封装性,提高安全性
	
	3)认识访问修饰符:			访问级别:
		public 				所有类
		protected			同包类  子类(不管是否同包)
		dafault(默认,友好)	同包类
		private				当前类


练习验证:
			当前类		同包类		子类(不管是否同包)		其他类		条件()
public		√			√			√						√			宽松	
protected	√			√			√
默认			√			√
private		√															严格

自己总结:
		四种访问修饰都可以修饰内部类
		只有final才能修饰局部变量		    
		
 
 	4)使用注意事项
 		4.1)类中的成员(属性(即:成员变量)和方法)可以被四种访问修饰符修饰
 		4.2)非类中成员的class只能被默认或public修饰
 			(也就是说一个.java中有多个类,只有一个类用public修饰,其他类只能默认修饰)
 		4.3)一般情况下,类中的属性私有,方法公有
 		
 		
 	
 	5)属性的封装
 		Dog类中的属性age为例  age过大或者过小都是不合理的
 		为了防止不合理的赋值,提高程序的运行的安全性
 		
 		编写公有的方法的getters和setters为私有属性赋值或取值,在setters中写限制条件
 		
 		
 		
final(最终)关键字:   		
  1)含义:也是一个修饰符
  		修饰:类,类的成员(属性[成员变量]和方法),局部变量,引用
  2)修饰类
  		final class  类名{}
  		不允许这个类被继承
	  原因:如果程序为了一个类中的某一功能而继承这个类的话,会增加程序架构的复杂度  		
   3)修饰方法
   		public final void 方法名(){}	   注意:final可以与public互换位置
   	 final修饰的方法为了防止子类对方法的重写,也可以防止无意识的重写,但是子类可以继承final写的方法
   	 不能修饰构造方法
   4)修饰成员变量
   		private final int a=0;
   		 基本类型的变量: 被修饰的属性值不允许修改,必须在对象被实例化之前赋值
   		 引用类型的变量:引用不能变,引用内容可以变
   		  1 声明的同时赋值	final int a=0
   		  2 构造方法赋值    
   		  		final int a;
   		  		public 类的构造方法{
   		  			a=0;// 必须赋值   若a之前已经赋值,就不能再赋值    
   		  				//若a之前没赋值,如果类有多个构造方法,每个构造方法都必须给a赋值
   		  		}
   		 成员变量初始化的三个位置：
			一是其定义处，也就是说在final变量定义时直接给其赋值，
			二是在构造函数中。在Java1.1以前，只能是在定义时给值。
			三是在初如化代码块中{},不能在static{}中赋值 
				区分:常量赋值:定义时直接赋值或在static{}中赋值,不能在{}中赋值
   		  		
   5)修饰局部变量(只能用final修饰)
   	   这个变量只能被赋值一次
   	   也可以修饰方法的形式参数
   	   
   6)修饰引用类型
   	  这个引用的内容(属性值)可以变,但是引用不能变化
   	  如:Person p=new Person();
   	 	p.name="旺财";//内容可以变
   	 	
   	 /*	Person p1=new Perdon();		×××
   	 	p=p1;*/     注意:p是引用,p后面不能紧跟"="  即,引用不能变
 	                                        
 

 
 
 	
 		