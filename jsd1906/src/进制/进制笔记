 刘苍松
15601035818
=====================================
1.什么是二进制(以0b开头)  int a=0b1100;    十进制是50
	逢二进一的计数规则01
	
2.十六进制(以0x开头)  int a=0x32;    十进制是50
	用于简写/缩写二进制,因为二进制书写冗长/麻烦/易错/
	十六进制基数是二的整次幂,所以四位二进制可以缩写为一个十六进制数字
	缩写规则: 将二进制从后向前(即,从低位向高位)每四位二进制缩写为一个16进制
		1110 1011 0010 1010 0001 0111 1110 1011
	0x    e    b	2	a	1		7	e	b    		
		0~9,a(10),b(11),c(12),d(13),e(14),f(15)
	
3.补码:计算机中一种解决负数(有符号的数)问题的编码,
     核心目的是将固定位数的二进制数分一半作为负数
		
	补码是如何将固定位数的二进制分一半作为负数的?
	以四位二进制为例讲解补码编码规则:
		1)计算时,超过四位数时候自动溢出舍弃,保持数字始终是4位二进制数
		2)超过32位溢出可能是正数或者负数
		3)补码的互补对称现象
		-n=~n+1(n为正负都行,除了是最小值[最小的负值],最大值+1变最小值)	
			~n指的是n的二进制按位取反
		
4.进制运算
	4.1)运算符号
			~	取反
			&	与
			|	或
			>>>	逻辑右移位
			>>	右移位
			<<	左移位
	  (1)&(逻辑乘法)		
			基本乘法:有0则为0
					0&0=0	0&1=0	1&0=0	1&1=1
			注意:计算时需要将两个数字对齐位数,对应位置计算&运算
			
		与计算意义:掩码(Mask)计算(拆分计算),拆分结果k是n的后8位        
			n=		01001010  	11110101    01010111	10101011
			m=		00000000	00000000	00000000	11111111(8位掩码,8个1)
			k=m&n	00000000	00000000	00000000	10101011		
		
	  (2)>>>(逻辑右移位)高位补0
	  		n=			01001010  	11110101    01010111	10101011
	  		m=n>>>2		0001001010    11110101    01010111	  101010
				整体右移2位,多余的舍弃,空位补零
				
	  (3) |  逻辑加
	  		基本规则:有1则1
	  			0|0=0	1|0=1	0|1=1	1|1=1
		
			注意:计算时,将两个数的数位对齐,对应位置进行或运算
			意义:将两个数字拼接计算
				n=		00000000 	11110101    00000000	10101011
				m=		00000000  	00000000    01010111	00000000
				k=n|m   00000000  	11110101	01010111	10101011
	  4)<< 左移位(实际上是权重在移位)  将二进制数字每一位向左移动,高位溢出,低位补零
	  	移位计算的数学意义:二进制向左移动n次,对应的十进制数值变为原来的2^n倍
			例如:	110010   50
				   1100100   100 扩大2倍	 移动1次
				  11001000	 200 扩大4倍	 移动2次
	  5)>> 右移位与左移位相反
	  	注意:右移n位,数值缩小为原来的2^n倍,不能整除则向小方向取整  
	  		例如:	25/2--->(12)   -25/2---->(-13)
	  	
	  6)>>与>>>的区别
	  	>> 称为数学右移计算,当正数的时候(高位为0),高位补0,为负数时(高位为1),高位补1
	  		其运算是接近数学结果,向小方向取整
	  		
	  	>>>称为逻辑右移位运算,无论正负高位都补0;负数时,不符合数学计算结果
	  		单纯将数位向右移动,其结果不考虑数学意义,进行数字拆分合并时采用纯正的右移动
	  		
	  	面试案例:替代2的整数倍乘法,使用数学移位
	  		例如:  n*32 可以替换为n<<5
	  			   n/2(n>=0)可以替换为 n>>1
	  			   
	  	
	  	
		
		
		
				
	
	
	
	




